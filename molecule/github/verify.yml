---
- name: Verify
  hosts: all
  become: true
  tasks:
    - name: Ensure verify_output directory exists
      ansible.builtin.file:
        path: "{{ report_root }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      become: false

    - name: Check service statuses
      ansible.builtin.service_facts:

    - name: Verify required services are running
      ansible.builtin.assert:
        that:
          - "'influxdb.service' in ansible_facts.services"
          - "ansible_facts.services['influxdb.service'].state == 'running'"
          - "'telegraf.service' in ansible_facts.services"
          - "ansible_facts.services['telegraf.service'].state == 'running'"
          - "'loki.service' in ansible_facts.services"
          - "ansible_facts.services['loki.service'].state == 'running'"
          - "'alloy.service' in ansible_facts.services"
          - "ansible_facts.services['alloy.service'].state == 'running'"

    - name: Check ports
      wait_for:
        port: "{{ item }}"
        timeout: 30
        state: started
      loop:
        - 8086 # InfluxDB
        - 3100 # Loki

    # ..................................................................................
    - name: Get InfluxDB token
      command: "influx auth list --json"
      register: auth_list
      changed_when: false

    - name: Set token fact
      set_fact:
        influx_token: "{{ (auth_list.stdout | from_json | json_query('[?description==`admin`].token'))[0] }}"

    - name: Get timestamp for 5 minutes ago
      command: date -d '5 minutes ago' -u +'%Y-%m-%dT%H:%M:%SZ'
      register: time_stamp
      changed_when: false

    - name: Check Loki data ingestion
      command: >
        logcli --addr="http://localhost:3100" query '{job="varlogs"}' 
        --from="{{ time_stamp.stdout }}"
        --limit=1
      register: loki_data
      failed_when: loki_data.stdout | trim == ""
      changed_when: false

    # - name: Check InfluxDB data ingestion
    #   command: >
    #     influx query --token {{ influx_token }}
    #     'from(bucket:"telegraf")
    #     |> range(start: -5m)
    #     |> filter(fn: (r) => r["_measurement"] == "cpu")
    #     |> count()
    #     |> yield(name: "count")'
    #   register: influx_data
    #   failed_when: >
    #     influx_data.rc != 0 or
    #     influx_data.stdout | trim | regex_search(',[0-9]+,') is not defined
    #   changed_when: false

    # ..................................................................................
    # New data ingestion checks
    # - name: Check InfluxDB data ingestion
    #   command: >
    #     influx query 'from(bucket:"telegraf")
    #     |> range(start: -5m)
    #     |> filter(fn: (r) => r._measurement == "cpu")
    #     |> count()'
    #   register: influx_data
    #   failed_when: influx_data.stdout | trim | int < 1
    #   changed_when: false

    - name: Check Loki data ingestion
      command: >
        logcli --addr="http://localhost:3100" query '{job="varlogs"}' 
        --from="$(date -d '5 minutes ago' -u +'%Y-%m-%dT%H:%M:%SZ')" 
        --limit=1
      register: loki_data
      failed_when: loki_data.stdout | trim == ""
      changed_when: false

    # Gather detailed information for report
    - name: Collect process information
      command: "lsof -p $(pidof {{ item }})"
      register: process_info
      loop:
        - influxd
        - telegraf
        - loki
        - alloy
      changed_when: false

    - name: Collect service logs
      command: "journalctl -u {{ item }} --since '5 minutes ago'"
      register: service_logs
      loop:
        - influxdb
        - telegraf
        - loki
        - alloy
      changed_when: false

    - name: Save test results
      copy:
        content: |
          === GitHub CI Test Results ===
          Timestamp: {{ ansible_date_time.iso8601 }}

          Service Status:
          - InfluxDB: {{ ansible_facts.services['influxdb.service'].state }}
          - Telegraf: {{ ansible_facts.services['telegraf.service'].state }}
          - Loki: {{ ansible_facts.services['loki.service'].state }}
          - Alloy: {{ ansible_facts.services['alloy.service'].state }}

          Data Ingestion Status:
          - InfluxDB Data: {{ influx_data.stdout }}
          - Loki Data: {{ loki_data.stdout }}

          Process Information:
          {% for item in process_info.results %}
          === {{ item.item }} Processes ===
          {{ item.stdout }}

          {% endfor %}

          Service Logs:
          {% for item in service_logs.results %}
          === {{ item.item }} Logs ===
          {{ item.stdout }}

          {% endfor %}
        dest: "{{ report_root }}/github_ci_results.yml"
        mode: "0644"
      delegate_to: localhost
