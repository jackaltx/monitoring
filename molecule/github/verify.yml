---
- name: Verify
  hosts: all
  become: true
  tasks:
    - name: Ensure verify_output directory exists
      ansible.builtin.file:
        path: "{{ report_root }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      become: false

    - name: Check service statuses
      ansible.builtin.service_facts:

    - name: Verify required services are running
      ansible.builtin.assert:
        that:
          - "'influxdb.service' in ansible_facts.services"
          - "ansible_facts.services['influxdb.service'].state == 'running'"
          - "'telegraf.service' in ansible_facts.services"
          - "ansible_facts.services['telegraf.service'].state == 'running'"
          - "'loki.service' in ansible_facts.services"
          - "ansible_facts.services['loki.service'].state == 'running'"
          - "'alloy.service' in ansible_facts.services"
          - "ansible_facts.services['alloy.service'].state == 'running'"

    - name: Check ports
      wait_for:
        port: "{{ item }}"
        timeout: 30
        state: started
      loop:
        - 8086 # InfluxDB
        - 3100 # Loki

    # ..................................................................................
    # New data ingestion checks
    #
    - name: Get InfluxDB token
      command: "influx auth list --json"
      register: auth_list
      changed_when: false

    - name: Set token fact
      set_fact:
        influx_token: "{{ (auth_list.stdout | from_json | json_query('[?description==`admin`].token'))[0] }}"

    - name: Check InfluxDB data ingestion
      command: >
        influx query --token {{ influx_token }} 
        'from(bucket:"telegraf")
        |> range(start: -5m)
        |> filter(fn: (r) => r["_measurement"] == "cpu" and r["cpu"] == "cpu-total")
        |> filter(fn: (r) => r["_field"] == "usage_system" or r["_field"] == "usage_user")
        |> keep(columns: ["_time", "_field", "_value"])
        |> limit(n: 5)
        |> yield(name: "result")'
      register: influx_data
      failed_when: >
        influx_data.rc != 0 or
        influx_data.stdout | trim == ""
      changed_when: false
      retries: 3
      delay: 10
      until: influx_data is success

    # - name: Check InfluxDB data ingestion
    #   command: >
    #     influx query --token {{ influx_token }}
    #     'from(bucket:"telegraf")
    #     |> range(start: -5m)
    #     |> filter(fn: (r) => r["_measurement"] == "cpu" and r["cpu"] == "cpu-total")
    #     |> filter(fn: (r) => r["_field"] == "usage_user")
    #     |> keep(columns: ["_time", "_value"])
    #     |> last()'
    #   register: influx_data
    #   failed_when: >
    #     influx_data.rc != 0 or
    #     influx_data.stdout | trim == ""
    #   changed_when: false

    # - name: Check InfluxDB data ingestion
    #   command: >
    #     influx query --token {{ influx_token }}
    #     'from(bucket:"telegraf")
    #     |> range(start: -5m)
    #     |> filter(fn: (r) => r["_measurement"] == "cpu")
    #     |> count()
    #     |> yield(name: "count")'
    #   register: influx_data
    #   failed_when: >
    #     influx_data.rc != 0 or
    #     influx_data.stdout | trim | regex_search(',[0-9]+,') is not defined
    #   changed_when: false

    # ..................................................................................
    - name: Check for any recent Loki logs
      command: >
        logcli --addr="http://localhost:3100" query 
        '{job="loki.source.journal.read"}'
        --since=5m
        --limit=2
      register: loki_data
      changed_when: false

    - name: Display Loki query result
      debug:
        var: loki_data

    # ..................................................................................
    - name: Get timestamp for 5 minutes ago
      command: date -d '5 minutes ago' -u +'%Y-%m-%dT%H:%M:%SZ'
      register: time_stamp
      changed_when: false

    - name: Check Loki data ingestion (multiple sources)
      command: >
        logcli --addr="http://localhost:3100" query 
        '{job=~"loki.*|systemd-journal|alloy.*"}' 
        --from="{{ time_stamp.stdout }}"
        --limit=10
      register: loki_data
      failed_when: >
        loki_data.rc != 0 or
        loki_data.stdout | trim == ""
      changed_when: false
      retries: 3
      delay: 10
      until: loki_data is success

    # ..................................................................................
    # Gather detailed information for report
    #
    - name: Collect process information
      shell: "lsof -p $(pidof {{ item }})"
      register: process_info
      loop:
        - influxd
        - telegraf
        - loki
        - alloy
      changed_when: false

    - name: Filter lsof output
      when: process_info is defined
      set_fact:
        process_filtered: {}
      loop: "{{ process_info.results }}"
      vars:
        filtered_lines: "{{ item.stdout_lines | select('search', '(cwd|rtd|txt|TCP)') | list }}"
      register: filter_results

    # ..................................................................................
    - name: Collect service logs
      command: "journalctl -u {{ item }} --since '5 minutes ago'"
      register: service_logs
      loop:
        - influxdb
        - telegraf
        - loki
        - alloy
      changed_when: false

    # ..................................................................................
    - name: Save test results
      copy:
        content: |
          === GitHub CI Test Results ===
          Timestamp: {{ ansible_date_time.iso8601 }}

          Service Status:

          - InfluxDB: {{ ansible_facts.services['influxdb.service'].state }}

          - Telegraf: {{ ansible_facts.services['telegraf.service'].state }}

          - Loki: {{ ansible_facts.services['loki.service'].state }}

          - Alloy: {{ ansible_facts.services['alloy.service'].state }}


          Data Ingestion Status:

          - InfluxDB Data: {{ influx_data.stdout }}

          - Loki Data: {{ loki_data.stdout }}

          Process Information:


          {% for item in process_info.results %}
          === {{ item.item }} Processes ===
          {{ item.stdout }}

          {% endfor %}

          Service Logs:


          {% for item in service_logs.results %}
          === {{ item.item }} Logs ===
          {{ item.stdout }}

          {% endfor %}
        dest: "{{ report_root }}/github_ci_results.yml"
        mode: "0644"
      delegate_to: localhost

    # .......................................................................................
    # Add these tasks after your existing verification tasks
    #

    - name: Get Git information
      set_fact:
        git_info:
          branch: "{{ lookup('pipe', 'git rev-parse --abbrev-ref HEAD') }}"
          commit: "{{ lookup('pipe', 'git rev-parse HEAD') }}"
          status: "{{ lookup('pipe', 'git status --porcelain') | default('clean', true) }}"

    - name: Prepare status content for Gist
      set_fact:
        gist_content: |
          # Monitoring Stack Status

          **Timestamp:** {{ ansible_date_time.iso8601 }}

          ## Service Status
          - InfluxDB: {{ ansible_facts.services['influxdb.service'].state }}
          - Telegraf: {{ ansible_facts.services['telegraf.service'].state }}
          - Loki: {{ ansible_facts.services['loki.service'].state }}
          - Alloy: {{ ansible_facts.services['alloy.service'].state }}

          ## Git Repository Status
          - Branch: {{ git_info.branch }}
          - Commit: {{ git_info.commit }}
          - Status: {{ 'Clean' if not git_info.status else 'Modified' }}

          ## Data Ingestion
          ### InfluxDB Data:
          ```
          {{ influx_data.stdout | replace('\n', '\n  ') }}
          ```

          ### Loki Data:
          ```
          {{ loki_data.stdout | replace('\n', '\n  ') }}
          ```

          ## Connection Status
          - InfluxDB Port: 8086 ({{ 'LISTENING' if ansible_facts.services['influxdb.service'].state == 'running' else 'NOT LISTENING' }})
          - Loki Port: 3100 ({{ 'LISTENING' if ansible_facts.services['loki.service'].state == 'running' else 'NOT LISTENING' }})

          ## Recent Service Activity
          {% for item in service_logs.results %}
          ### {{ item.item | upper }} Logs
          | Timestamp | Level | Message |
          |-----------|-------|---------|
          {% for line in (item.stdout_lines[-5:] | default([])) %}
          {%- set parts = line.split('] ') -%}
          {%- set timestamp = line.split()[0:3] | join(' ') -%}
          {%- if 'level=' in line -%}
            {%- set level = line.split('level=')[1].split()[0] -%}
            {%- set message = line.split('msg=')[1] if 'msg=' in line else parts[-1] -%}
          {%- else -%}
            {%- set level = line.split()[3] | default('INFO') -%}
            {%- set message = parts[-1] if parts|length > 1 else line -%}
          {%- endif %}
          | {{ timestamp }} | {{ level }} | {{ message }} |
          {% endfor %}

          {% endfor %}
      delegate_to: localhost

    - name: Create or update Gist
      uri:
        url: "https://api.github.com/gists"
        method: "POST"
        body_format: json
        headers:
          Authorization: "Bearer {{ lookup('env', 'GIST_TOKEN') }}"
          Accept: "application/vnd.github.v3+json"
        body:
          description: "Monitoring Stack Status Report"
          public: true
          files:
            "status.md":
              content: "{{ gist_content }}"
        status_code: [200, 201]
      register: gist_result
      delegate_to: localhost
      environment:
        GIST_TOKEN: "{{ lookup('env', 'GIST_TOKEN') }}"
